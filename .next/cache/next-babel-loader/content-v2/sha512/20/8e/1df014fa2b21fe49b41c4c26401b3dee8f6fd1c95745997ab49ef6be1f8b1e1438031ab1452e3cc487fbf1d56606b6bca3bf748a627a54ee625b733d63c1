{"ast":null,"code":"const encryptZip = async (zipUint, imageUint, password, text) => {\n  const passwordUint = new TextEncoder().encode(password);\n  const baseKey = await crypto.subtle.importKey(\"raw\", passwordUint, \"PBKDF2\", false, [\"deriveBits\", \"deriveKey\"]);\n  const cryptoKey = await crypto.subtle.deriveKey({\n    name: \"PBKDF2\",\n    salt: imageUint.slice(0, 16),\n    iterations: 10000,\n    hash: \"SHA-256\"\n  }, baseKey, {\n    name: \"AES-CTR\",\n    length: 128\n  }, false, [\"encrypt\"]);\n  const zipEncrypted = await crypto.subtle.encrypt({\n    name: \"AES-CTR\",\n    counter: new Uint8Array(16),\n    length: 128\n  }, cryptoKey, zipUint.buffer); // Convert the patient details text to Uint8Array and append it\n\n  const textUint = new TextEncoder().encode(text); // Append a separator between the encrypted ZIP and the text details\n\n  const separator = new TextEncoder().encode(\"::PATIENT_DETAILS::\"); // Combine image, encrypted zip, separator, and text\n\n  const resultUint = new Uint8Array([...imageUint, ...new Uint8Array(zipEncrypted), ...separator, ...textUint]);\n  return resultUint;\n};","map":{"version":3,"sources":["R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/workers/Hide.worker.js"],"names":["encryptZip","zipUint","imageUint","password","text","passwordUint","TextEncoder","encode","baseKey","crypto","subtle","importKey","cryptoKey","deriveKey","name","salt","slice","iterations","hash","length","zipEncrypted","encrypt","counter","Uint8Array","buffer","textUint","separator","resultUint"],"mappings":"AAAA,MAAMA,UAAU,GAAG,OAAOC,OAAP,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,IAArC,KAA8C;AAC7D,QAAMC,YAAY,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBJ,QAAzB,CAArB;AACA,QAAMK,OAAO,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,SAAd,CAClB,KADkB,EAElBN,YAFkB,EAGlB,QAHkB,EAIlB,KAJkB,EAKlB,CAAC,YAAD,EAAe,WAAf,CALkB,CAAtB;AAOA,QAAMO,SAAS,GAAG,MAAMH,MAAM,CAACC,MAAP,CAAcG,SAAd,CACpB;AACIC,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,IAAI,EAAEb,SAAS,CAACc,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAFV;AAGIC,IAAAA,UAAU,EAAE,KAHhB;AAIIC,IAAAA,IAAI,EAAE;AAJV,GADoB,EAOpBV,OAPoB,EAQpB;AACIM,IAAAA,IAAI,EAAE,SADV;AAEIK,IAAAA,MAAM,EAAE;AAFZ,GARoB,EAYpB,KAZoB,EAapB,CAAC,SAAD,CAboB,CAAxB;AAeA,QAAMC,YAAY,GAAG,MAAMX,MAAM,CAACC,MAAP,CAAcW,OAAd,CACvB;AACIP,IAAAA,IAAI,EAAE,SADV;AAEIQ,IAAAA,OAAO,EAAE,IAAIC,UAAJ,CAAe,EAAf,CAFb;AAGIJ,IAAAA,MAAM,EAAE;AAHZ,GADuB,EAMvBP,SANuB,EAOvBX,OAAO,CAACuB,MAPe,CAA3B,CAxB6D,CAkC7D;;AACA,QAAMC,QAAQ,GAAG,IAAInB,WAAJ,GAAkBC,MAAlB,CAAyBH,IAAzB,CAAjB,CAnC6D,CAqC7D;;AACA,QAAMsB,SAAS,GAAG,IAAIpB,WAAJ,GAAkBC,MAAlB,CAAyB,qBAAzB,CAAlB,CAtC6D,CAwC7D;;AACA,QAAMoB,UAAU,GAAG,IAAIJ,UAAJ,CAAe,CAC9B,GAAGrB,SAD2B,EAE9B,GAAG,IAAIqB,UAAJ,CAAeH,YAAf,CAF2B,EAG9B,GAAGM,SAH2B,EAI9B,GAAGD,QAJ2B,CAAf,CAAnB;AAOA,SAAOE,UAAP;AACH,CAjDD","sourcesContent":["const encryptZip = async (zipUint, imageUint, password, text) => {\r\n    const passwordUint = new TextEncoder().encode(password);\r\n    const baseKey = await crypto.subtle.importKey(\r\n        \"raw\",\r\n        passwordUint,\r\n        \"PBKDF2\",\r\n        false,\r\n        [\"deriveBits\", \"deriveKey\"]\r\n    );\r\n    const cryptoKey = await crypto.subtle.deriveKey(\r\n        {\r\n            name: \"PBKDF2\",\r\n            salt: imageUint.slice(0, 16),\r\n            iterations: 10000,\r\n            hash: \"SHA-256\",\r\n        },\r\n        baseKey,\r\n        {\r\n            name: \"AES-CTR\",\r\n            length: 128,\r\n        },\r\n        false,\r\n        [\"encrypt\"]\r\n    );\r\n    const zipEncrypted = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-CTR\",\r\n            counter: new Uint8Array(16),\r\n            length: 128,\r\n        },\r\n        cryptoKey,\r\n        zipUint.buffer\r\n    );\r\n\r\n    // Convert the patient details text to Uint8Array and append it\r\n    const textUint = new TextEncoder().encode(text);\r\n\r\n    // Append a separator between the encrypted ZIP and the text details\r\n    const separator = new TextEncoder().encode(\"::PATIENT_DETAILS::\");\r\n\r\n    // Combine image, encrypted zip, separator, and text\r\n    const resultUint = new Uint8Array([\r\n        ...imageUint,\r\n        ...new Uint8Array(zipEncrypted),\r\n        ...separator,\r\n        ...textUint\r\n    ]);\r\n\r\n    return resultUint;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}