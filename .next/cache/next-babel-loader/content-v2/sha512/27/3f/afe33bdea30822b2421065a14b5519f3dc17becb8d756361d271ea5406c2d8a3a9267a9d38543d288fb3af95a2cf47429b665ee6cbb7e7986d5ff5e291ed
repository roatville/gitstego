{"ast":null,"code":"import { argon2 } from \"argon2-browser\"; // Import the Argon2 library\n\nconst decryptZip = async (zipUint, imageUint, password) => {\n  const passwordUint = new TextEncoder().encode(password); // Derive the key using Argon2\n\n  const argon2Options = {\n    pass: passwordUint,\n    // password as Uint8Array\n    salt: imageUint.slice(0, 16),\n    // Use the first 16 bytes of imageUint as the salt\n    time: 1,\n    // Argon2 parameter: number of iterations\n    mem: 1024,\n    // Argon2 parameter: memory usage in KiB\n    hashLen: 16,\n    // length of the generated key\n    parallelism: 1,\n    // number of threads\n    type: argon2.ArgonType.Argon2id // Argon2id is the recommended version for password hashing\n\n  };\n  const hash = await argon2.hash(argon2Options); // Derive the key using Argon2\n\n  const cryptoKey = await crypto.subtle.importKey(\"raw\", hash.hash, // Use the derived key from Argon2\n  {\n    name: \"AES-CTR\",\n    length: 128\n  }, false, [\"decrypt\"]);\n  const zipDecrypted = await crypto.subtle.decrypt({\n    name: \"AES-CTR\",\n    counter: new Uint8Array(16),\n    // Counter should be 16 bytes\n    length: 128\n  }, cryptoKey, zipUint.buffer);\n  return new Uint8Array(zipDecrypted);\n};\n\nonmessage = async ({\n  data: {\n    image: [{\n      contents,\n      type\n    }],\n    password\n  }\n}) => {\n  const imageUint = new Uint8Array(contents);\n  const marker = {\n    \"image/png\": [174, 66, 96, 130],\n    \"image/jpeg\": [255, 217],\n    \"image/gif\": [59]\n  }[type];\n  const indexOfZip = imageUint.findIndex((_, index) => imageUint.slice(index, index + marker.length).toString() === marker.toString()) + marker.length;\n  const zipEncryptedUint = imageUint.slice(indexOfZip);\n  const zipUint = await decryptZip(zipEncryptedUint, imageUint, password);\n  postMessage({\n    result: new Blob([zipUint], {\n      type: \"application/zip\"\n    })\n  });\n  close();\n};","map":{"version":3,"sources":["R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/workers/Find.worker.js"],"names":["argon2","decryptZip","zipUint","imageUint","password","passwordUint","TextEncoder","encode","argon2Options","pass","salt","slice","time","mem","hashLen","parallelism","type","ArgonType","Argon2id","hash","cryptoKey","crypto","subtle","importKey","name","length","zipDecrypted","decrypt","counter","Uint8Array","buffer","onmessage","data","image","contents","marker","indexOfZip","findIndex","_","index","toString","zipEncryptedUint","postMessage","result","Blob","close"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB,C,CAAyC;;AAEzC,MAAMC,UAAU,GAAG,OAAOC,OAAP,EAAgBC,SAAhB,EAA2BC,QAA3B,KAAwC;AACvD,QAAMC,YAAY,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBH,QAAzB,CAArB,CADuD,CAGvD;;AACA,QAAMI,aAAa,GAAG;AAClBC,IAAAA,IAAI,EAAEJ,YADY;AACE;AACpBK,IAAAA,IAAI,EAAEP,SAAS,CAACQ,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAFY;AAEY;AAC9BC,IAAAA,IAAI,EAAE,CAHY;AAGT;AACTC,IAAAA,GAAG,EAAE,IAJa;AAIP;AACXC,IAAAA,OAAO,EAAE,EALS;AAKL;AACbC,IAAAA,WAAW,EAAE,CANK;AAMF;AAChBC,IAAAA,IAAI,EAAEhB,MAAM,CAACiB,SAAP,CAAiBC,QAPL,CAOe;;AAPf,GAAtB;AAUA,QAAMC,IAAI,GAAG,MAAMnB,MAAM,CAACmB,IAAP,CAAYX,aAAZ,CAAnB,CAduD,CAcR;;AAE/C,QAAMY,SAAS,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,SAAd,CACpB,KADoB,EAEpBJ,IAAI,CAACA,IAFe,EAET;AACX;AACIK,IAAAA,IAAI,EAAE,SADV;AAEIC,IAAAA,MAAM,EAAE;AAFZ,GAHoB,EAOpB,KAPoB,EAQpB,CAAC,SAAD,CARoB,CAAxB;AAWA,QAAMC,YAAY,GAAG,MAAML,MAAM,CAACC,MAAP,CAAcK,OAAd,CACvB;AACIH,IAAAA,IAAI,EAAE,SADV;AAEII,IAAAA,OAAO,EAAE,IAAIC,UAAJ,CAAe,EAAf,CAFb;AAEiC;AAC7BJ,IAAAA,MAAM,EAAE;AAHZ,GADuB,EAMvBL,SANuB,EAOvBlB,OAAO,CAAC4B,MAPe,CAA3B;AAUA,SAAO,IAAID,UAAJ,CAAeH,YAAf,CAAP;AACH,CAtCD;;AAwCAK,SAAS,GAAG,OAAO;AACfC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAF;AAAYlB,MAAAA;AAAZ,KAAD,CADL;AAEFZ,IAAAA;AAFE;AADS,CAAP,KAKN;AACF,QAAMD,SAAS,GAAG,IAAI0B,UAAJ,CAAeK,QAAf,CAAlB;AAEA,QAAMC,MAAM,GAAG;AACX,iBAAa,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,GAAd,CADF;AAEX,kBAAc,CAAC,GAAD,EAAM,GAAN,CAFH;AAGX,iBAAa,CAAC,EAAD;AAHF,IAIbnB,IAJa,CAAf;AAMA,QAAMoB,UAAU,GACZjC,SAAS,CAACkC,SAAV,CACI,CAACC,CAAD,EAAIC,KAAJ,KACIpC,SAAS,CAACQ,KAAV,CAAgB4B,KAAhB,EAAuBA,KAAK,GAAGJ,MAAM,CAACV,MAAtC,EAA8Ce,QAA9C,OACAL,MAAM,CAACK,QAAP,EAHR,IAIIL,MAAM,CAACV,MALf;AAOA,QAAMgB,gBAAgB,GAAGtC,SAAS,CAACQ,KAAV,CAAgByB,UAAhB,CAAzB;AACA,QAAMlC,OAAO,GAAG,MAAMD,UAAU,CAACwC,gBAAD,EAAmBtC,SAAnB,EAA8BC,QAA9B,CAAhC;AAEAsC,EAAAA,WAAW,CAAC;AACRC,IAAAA,MAAM,EAAE,IAAIC,IAAJ,CAAS,CAAC1C,OAAD,CAAT,EAAoB;AAAEc,MAAAA,IAAI,EAAE;AAAR,KAApB;AADA,GAAD,CAAX;AAGA6B,EAAAA,KAAK;AACR,CA5BD","sourcesContent":["import { argon2 } from \"argon2-browser\"; // Import the Argon2 library\r\n\r\nconst decryptZip = async (zipUint, imageUint, password) => {\r\n    const passwordUint = new TextEncoder().encode(password);\r\n\r\n    // Derive the key using Argon2\r\n    const argon2Options = {\r\n        pass: passwordUint, // password as Uint8Array\r\n        salt: imageUint.slice(0, 16), // Use the first 16 bytes of imageUint as the salt\r\n        time: 1, // Argon2 parameter: number of iterations\r\n        mem: 1024, // Argon2 parameter: memory usage in KiB\r\n        hashLen: 16, // length of the generated key\r\n        parallelism: 1, // number of threads\r\n        type: argon2.ArgonType.Argon2id, // Argon2id is the recommended version for password hashing\r\n    };\r\n\r\n    const hash = await argon2.hash(argon2Options); // Derive the key using Argon2\r\n\r\n    const cryptoKey = await crypto.subtle.importKey(\r\n        \"raw\",\r\n        hash.hash, // Use the derived key from Argon2\r\n        {\r\n            name: \"AES-CTR\",\r\n            length: 128,\r\n        },\r\n        false,\r\n        [\"decrypt\"]\r\n    );\r\n\r\n    const zipDecrypted = await crypto.subtle.decrypt(\r\n        {\r\n            name: \"AES-CTR\",\r\n            counter: new Uint8Array(16), // Counter should be 16 bytes\r\n            length: 128,\r\n        },\r\n        cryptoKey,\r\n        zipUint.buffer\r\n    );\r\n\r\n    return new Uint8Array(zipDecrypted);\r\n};\r\n\r\nonmessage = async ({\r\n    data: {\r\n        image: [{ contents, type }],\r\n        password,\r\n    },\r\n}) => {\r\n    const imageUint = new Uint8Array(contents);\r\n\r\n    const marker = {\r\n        \"image/png\": [174, 66, 96, 130],\r\n        \"image/jpeg\": [255, 217],\r\n        \"image/gif\": [59],\r\n    }[type];\r\n\r\n    const indexOfZip =\r\n        imageUint.findIndex(\r\n            (_, index) =>\r\n                imageUint.slice(index, index + marker.length).toString() ===\r\n                marker.toString()\r\n        ) + marker.length;\r\n\r\n    const zipEncryptedUint = imageUint.slice(indexOfZip);\r\n    const zipUint = await decryptZip(zipEncryptedUint, imageUint, password);\r\n\r\n    postMessage({\r\n        result: new Blob([zipUint], { type: \"application/zip\" }),\r\n    });\r\n    close();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}