{"ast":null,"code":"var _regeneratorRuntime = require(\"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar encryptZip = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(zipUint, imageUint, password, text) {\n    var passwordUint, baseKey, cryptoKey, zipEncrypted, textUint, separator, resultUint;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            passwordUint = new TextEncoder().encode(password);\n            _context.next = 3;\n            return crypto.subtle.importKey(\"raw\", passwordUint, \"PBKDF2\", false, [\"deriveBits\", \"deriveKey\"]);\n\n          case 3:\n            baseKey = _context.sent;\n            _context.next = 6;\n            return crypto.subtle.deriveKey({\n              name: \"PBKDF2\",\n              salt: imageUint.slice(0, 16),\n              iterations: 10000,\n              hash: \"SHA-256\"\n            }, baseKey, {\n              name: \"AES-CTR\",\n              length: 128\n            }, false, [\"encrypt\"]);\n\n          case 6:\n            cryptoKey = _context.sent;\n            _context.next = 9;\n            return crypto.subtle.encrypt({\n              name: \"AES-CTR\",\n              counter: new Uint8Array(16),\n              length: 128\n            }, cryptoKey, zipUint.buffer);\n\n          case 9:\n            zipEncrypted = _context.sent;\n            // Convert the patient details text to Uint8Array and append it\n            textUint = new TextEncoder().encode(text); // Append a separator between the encrypted ZIP and the text details\n\n            separator = new TextEncoder().encode(\"::PATIENT_DETAILS::\"); // Combine image, encrypted zip, separator, and text\n\n            resultUint = new Uint8Array([].concat(_toConsumableArray(imageUint), _toConsumableArray(new Uint8Array(zipEncrypted)), _toConsumableArray(separator), _toConsumableArray(textUint)));\n            return _context.abrupt(\"return\", resultUint);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function encryptZip(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/workers/Hide.worker.js"],"names":["encryptZip","zipUint","imageUint","password","text","passwordUint","TextEncoder","encode","crypto","subtle","importKey","baseKey","deriveKey","name","salt","slice","iterations","hash","length","cryptoKey","encrypt","counter","Uint8Array","buffer","zipEncrypted","textUint","separator","resultUint"],"mappings":";;;;;;AAAA,IAAMA,UAAU;AAAA,sEAAG,iBAAOC,OAAP,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,YAAAA,YADS,GACM,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBJ,QAAzB,CADN;AAAA;AAAA,mBAEOK,MAAM,CAACC,MAAP,CAAcC,SAAd,CAClB,KADkB,EAElBL,YAFkB,EAGlB,QAHkB,EAIlB,KAJkB,EAKlB,CAAC,YAAD,EAAe,WAAf,CALkB,CAFP;;AAAA;AAETM,YAAAA,OAFS;AAAA;AAAA,mBASSH,MAAM,CAACC,MAAP,CAAcG,SAAd,CACpB;AACIC,cAAAA,IAAI,EAAE,QADV;AAEIC,cAAAA,IAAI,EAAEZ,SAAS,CAACa,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAFV;AAGIC,cAAAA,UAAU,EAAE,KAHhB;AAIIC,cAAAA,IAAI,EAAE;AAJV,aADoB,EAOpBN,OAPoB,EAQpB;AACIE,cAAAA,IAAI,EAAE,SADV;AAEIK,cAAAA,MAAM,EAAE;AAFZ,aARoB,EAYpB,KAZoB,EAapB,CAAC,SAAD,CAboB,CATT;;AAAA;AASTC,YAAAA,SATS;AAAA;AAAA,mBAwBYX,MAAM,CAACC,MAAP,CAAcW,OAAd,CACvB;AACIP,cAAAA,IAAI,EAAE,SADV;AAEIQ,cAAAA,OAAO,EAAE,IAAIC,UAAJ,CAAe,EAAf,CAFb;AAGIJ,cAAAA,MAAM,EAAE;AAHZ,aADuB,EAMvBC,SANuB,EAOvBlB,OAAO,CAACsB,MAPe,CAxBZ;;AAAA;AAwBTC,YAAAA,YAxBS;AAkCf;AACMC,YAAAA,QAnCS,GAmCE,IAAInB,WAAJ,GAAkBC,MAAlB,CAAyBH,IAAzB,CAnCF,EAqCf;;AACMsB,YAAAA,SAtCS,GAsCG,IAAIpB,WAAJ,GAAkBC,MAAlB,CAAyB,qBAAzB,CAtCH,EAwCf;;AACMoB,YAAAA,UAzCS,GAyCI,IAAIL,UAAJ,8BACZpB,SADY,sBAEZ,IAAIoB,UAAJ,CAAeE,YAAf,CAFY,sBAGZE,SAHY,sBAIZD,QAJY,GAzCJ;AAAA,6CAgDRE,UAhDQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV3B,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["const encryptZip = async (zipUint, imageUint, password, text) => {\r\n    const passwordUint = new TextEncoder().encode(password);\r\n    const baseKey = await crypto.subtle.importKey(\r\n        \"raw\",\r\n        passwordUint,\r\n        \"PBKDF2\",\r\n        false,\r\n        [\"deriveBits\", \"deriveKey\"]\r\n    );\r\n    const cryptoKey = await crypto.subtle.deriveKey(\r\n        {\r\n            name: \"PBKDF2\",\r\n            salt: imageUint.slice(0, 16),\r\n            iterations: 10000,\r\n            hash: \"SHA-256\",\r\n        },\r\n        baseKey,\r\n        {\r\n            name: \"AES-CTR\",\r\n            length: 128,\r\n        },\r\n        false,\r\n        [\"encrypt\"]\r\n    );\r\n    const zipEncrypted = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-CTR\",\r\n            counter: new Uint8Array(16),\r\n            length: 128,\r\n        },\r\n        cryptoKey,\r\n        zipUint.buffer\r\n    );\r\n\r\n    // Convert the patient details text to Uint8Array and append it\r\n    const textUint = new TextEncoder().encode(text);\r\n\r\n    // Append a separator between the encrypted ZIP and the text details\r\n    const separator = new TextEncoder().encode(\"::PATIENT_DETAILS::\");\r\n\r\n    // Combine image, encrypted zip, separator, and text\r\n    const resultUint = new Uint8Array([\r\n        ...imageUint,\r\n        ...new Uint8Array(zipEncrypted),\r\n        ...separator,\r\n        ...textUint\r\n    ]);\r\n\r\n    return resultUint;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}