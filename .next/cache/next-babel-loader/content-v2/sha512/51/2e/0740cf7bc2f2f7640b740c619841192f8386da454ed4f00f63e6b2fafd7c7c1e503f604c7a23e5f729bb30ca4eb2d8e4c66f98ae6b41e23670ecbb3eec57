{"ast":null,"code":"import _slicedToArray from \"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport JSZip from \"jszip\";\n\nvar encryptZip = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(zipUint, imageUint, password, text) {\n    var passwordUint, baseKey, cryptoKey, zipEncrypted, textUint, resultUint;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            passwordUint = new TextEncoder().encode(password);\n            _context.next = 3;\n            return crypto.subtle.importKey(\"raw\", passwordUint, \"PBKDF2\", false, [\"deriveBits\", \"deriveKey\"]);\n\n          case 3:\n            baseKey = _context.sent;\n            _context.next = 6;\n            return crypto.subtle.deriveKey({\n              name: \"PBKDF2\",\n              salt: imageUint.slice(0, 16),\n              iterations: 10000,\n              hash: \"SHA-256\"\n            }, baseKey, {\n              name: \"AES-CTR\",\n              length: 128\n            }, false, [\"encrypt\"]);\n\n          case 6:\n            cryptoKey = _context.sent;\n            _context.next = 9;\n            return crypto.subtle.encrypt({\n              name: \"AES-CTR\",\n              counter: new Uint8Array(16),\n              length: 128\n            }, cryptoKey, zipUint.buffer);\n\n          case 9:\n            zipEncrypted = _context.sent;\n            // Convert the patient details text to Uint8Array and append it\n            textUint = new TextEncoder().encode(text); // Combine image, encrypted zip, and text\n\n            resultUint = new Uint8Array([].concat(_toConsumableArray(imageUint), _toConsumableArray(new Uint8Array(zipEncrypted)), _toConsumableArray(textUint)));\n            return _context.abrupt(\"return\", resultUint);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function encryptZip(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nonmessage = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var _ref2$data, _ref2$data$image, _ref2$data$image$, contents, type, files, compression, password, text, zip, imageUint, zipUint, resultUint;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref2$data = _ref2.data, _ref2$data$image = _slicedToArray(_ref2$data.image, 1), _ref2$data$image$ = _ref2$data$image[0], contents = _ref2$data$image$.contents, type = _ref2$data$image$.type, files = _ref2$data.files, compression = _ref2$data.compression, password = _ref2$data.password, text = _ref2$data.text;\n            zip = new JSZip(); // Add files to the ZIP archive\n\n            files.forEach(function (file) {\n              var name = file.name,\n                  contents = file.contents,\n                  date = file.date;\n              zip.file(name, contents, {\n                date: date\n              });\n            });\n            imageUint = new Uint8Array(contents); // Generate zip as a Uint8Array\n\n            _context2.next = 6;\n            return zip.generateAsync({\n              type: \"uint8array\",\n              compression: compression === 0 ? \"STORE\" : \"DEFLATE\",\n              compressionOptions: {\n                level: compression\n              }\n            }, function (_ref4) {\n              var percent = _ref4.percent;\n              postMessage({\n                progress: percent\n              });\n            });\n\n          case 6:\n            zipUint = _context2.sent;\n            _context2.next = 9;\n            return encryptZip(zipUint, imageUint, password, text);\n\n          case 9:\n            resultUint = _context2.sent;\n            // Return the combined result as a Blob\n            postMessage({\n              result: new Blob([resultUint], {\n                type: type\n              })\n            });\n            close();\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function onmessage(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/workers/Hide.worker.js"],"names":["JSZip","encryptZip","zipUint","imageUint","password","text","passwordUint","TextEncoder","encode","crypto","subtle","importKey","baseKey","deriveKey","name","salt","slice","iterations","hash","length","cryptoKey","encrypt","counter","Uint8Array","buffer","zipEncrypted","textUint","resultUint","onmessage","data","image","contents","type","files","compression","zip","forEach","file","date","generateAsync","compressionOptions","level","percent","postMessage","progress","result","Blob","close"],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\r\n\r\nconst encryptZip = async (zipUint, imageUint, password, text) => {\r\n    const passwordUint = new TextEncoder().encode(password);\r\n    const baseKey = await crypto.subtle.importKey(\r\n        \"raw\",\r\n        passwordUint,\r\n        \"PBKDF2\",\r\n        false,\r\n        [\"deriveBits\", \"deriveKey\"]\r\n    );\r\n    const cryptoKey = await crypto.subtle.deriveKey(\r\n        {\r\n            name: \"PBKDF2\",\r\n            salt: imageUint.slice(0, 16),\r\n            iterations: 10000,\r\n            hash: \"SHA-256\",\r\n        },\r\n        baseKey,\r\n        {\r\n            name: \"AES-CTR\",\r\n            length: 128,\r\n        },\r\n        false,\r\n        [\"encrypt\"]\r\n    );\r\n    const zipEncrypted = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-CTR\",\r\n            counter: new Uint8Array(16),\r\n            length: 128,\r\n        },\r\n        cryptoKey,\r\n        zipUint.buffer\r\n    );\r\n\r\n    // Convert the patient details text to Uint8Array and append it\r\n    const textUint = new TextEncoder().encode(text);\r\n    \r\n    // Combine image, encrypted zip, and text\r\n    const resultUint = new Uint8Array([...imageUint, ...new Uint8Array(zipEncrypted), ...textUint]);\r\n\r\n    return resultUint;\r\n};\r\n\r\nonmessage = async ({\r\n    data: {\r\n        image: [{ contents, type }],\r\n        files,\r\n        compression,\r\n        password,\r\n        text, // Add patient details text to be hidden\r\n    },\r\n}) => {\r\n    const zip = new JSZip();\r\n    \r\n    // Add files to the ZIP archive\r\n    files.forEach((file) => {\r\n        const { name, contents, date } = file;\r\n        zip.file(name, contents, {\r\n            date,\r\n        });\r\n    });\r\n\r\n    const imageUint = new Uint8Array(contents);\r\n\r\n    // Generate zip as a Uint8Array\r\n    const zipUint = await zip.generateAsync(\r\n        {\r\n            type: \"uint8array\",\r\n            compression: compression === 0 ? \"STORE\" : \"DEFLATE\",\r\n            compressionOptions: {\r\n                level: compression,\r\n            },\r\n        },\r\n        ({ percent }) => {\r\n            postMessage({ progress: percent });\r\n        }\r\n    );\r\n\r\n    // Call encryptZip to handle the encryption and text embedding\r\n    const resultUint = await encryptZip(zipUint, imageUint, password, text);\r\n\r\n    // Return the combined result as a Blob\r\n    postMessage({\r\n        result: new Blob([resultUint], { type }),\r\n    });\r\n\r\n    close();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}