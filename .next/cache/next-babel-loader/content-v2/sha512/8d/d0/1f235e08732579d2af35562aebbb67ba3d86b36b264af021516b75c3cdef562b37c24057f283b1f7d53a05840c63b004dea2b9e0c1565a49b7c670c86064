{"ast":null,"code":"import JSZip from \"jszip\";\n\nconst encryptZip = async (zipUint, imageUint, password) => {\n  const passwordUint = new TextEncoder().encode(password);\n  const baseKey = await crypto.subtle.importKey(\"raw\", passwordUint, \"PBKDF2\", false, [\"deriveBits\", \"deriveKey\"]);\n  const cryptoKey = await crypto.subtle.deriveKey({\n    name: \"PBKDF2\",\n    salt: imageUint.slice(0, 16),\n    iterations: 10000,\n    hash: \"SHA-256\"\n  }, baseKey, {\n    name: \"AES-CTR\",\n    length: 128\n  }, false, [\"encrypt\"]);\n  const zipEncrypted = await crypto.subtle.encrypt({\n    name: \"AES-CTR\",\n    counter: new Uint8Array(16),\n    length: 128\n  }, cryptoKey, zipUint.buffer);\n  return new Uint8Array(zipEncrypted);\n};\n\nonmessage = async ({\n  data: {\n    image: [{\n      contents,\n      type\n    }],\n    files,\n    compression,\n    password,\n    patientID\n  }\n}) => {\n  const zip = new JSZip();\n  files.forEach(file => {\n    const {\n      name,\n      contents,\n      date\n    } = file;\n    zip.file(name, contents, {\n      date\n    });\n  });\n  const imageUint = new Uint8Array(contents);\n  const zipUint = await zip.generateAsync({\n    type: \"uint8array\",\n    compression: compression === 0 ? \"STORE\" : \"DEFLATE\",\n    compressionOptions: {\n      level: compression\n    }\n  }, ({\n    percent\n  }) => {\n    postMessage({\n      progress: percent\n    });\n  });\n  const zipEncryptedUint = await encryptZip(zipUint, imageUint, password);\n  const resultUint = new Uint8Array([...imageUint, ...zipEncryptedUint]);\n  const fileName = patientID ? `${patientID}_image.png` : \"embedded_image.png\";\n  postMessage({\n    result: new Blob([resultUint], {\n      type\n    })\n  });\n  close();\n};","map":{"version":3,"sources":["R:/VIT Research/Research Papers for topics/Stegnography for medical imaging/portalwebsite/gitstego/workers/Hide.worker.js"],"names":["JSZip","encryptZip","zipUint","imageUint","password","passwordUint","TextEncoder","encode","baseKey","crypto","subtle","importKey","cryptoKey","deriveKey","name","salt","slice","iterations","hash","length","zipEncrypted","encrypt","counter","Uint8Array","buffer","onmessage","data","image","contents","type","files","compression","patientID","zip","forEach","file","date","generateAsync","compressionOptions","level","percent","postMessage","progress","zipEncryptedUint","resultUint","fileName","result","Blob","close"],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\r\n\r\nconst encryptZip = async (zipUint, imageUint, password) => {\r\n    const passwordUint = new TextEncoder().encode(password);\r\n    const baseKey = await crypto.subtle.importKey(\r\n        \"raw\",\r\n        passwordUint,\r\n        \"PBKDF2\",\r\n        false,\r\n        [\"deriveBits\", \"deriveKey\"]\r\n    );\r\n    const cryptoKey = await crypto.subtle.deriveKey(\r\n        {\r\n            name: \"PBKDF2\",\r\n            salt: imageUint.slice(0, 16),\r\n            iterations: 10000,\r\n            hash: \"SHA-256\",\r\n        },\r\n        baseKey,\r\n        {\r\n            name: \"AES-CTR\",\r\n            length: 128,\r\n        },\r\n        false,\r\n        [\"encrypt\"]\r\n    );\r\n    const zipEncrypted = await crypto.subtle.encrypt(\r\n        {\r\n            name: \"AES-CTR\",\r\n            counter: new Uint8Array(16),\r\n            length: 128,\r\n        },\r\n        cryptoKey,\r\n        zipUint.buffer\r\n    );\r\n    return new Uint8Array(zipEncrypted);\r\n};\r\n\r\nonmessage = async ({\r\n    data: {\r\n        image: [{ contents, type }],\r\n        files,\r\n        compression,\r\n        password,\r\n        patientID\r\n    },\r\n}) => {\r\n    const zip = new JSZip();\r\n    files.forEach((file) => {\r\n        const { name, contents, date } = file;\r\n        zip.file(name, contents, {\r\n            date,\r\n        });\r\n    });\r\n\r\n    const imageUint = new Uint8Array(contents);\r\n\r\n    const zipUint = await zip.generateAsync(\r\n        {\r\n            type: \"uint8array\",\r\n            compression: compression === 0 ? \"STORE\" : \"DEFLATE\",\r\n            compressionOptions: {\r\n                level: compression,\r\n            },\r\n        },\r\n        ({ percent }) => {\r\n            postMessage({ progress: percent });\r\n        }\r\n    );\r\n\r\n    const zipEncryptedUint = await encryptZip(zipUint, imageUint, password);\r\n    const resultUint = new Uint8Array([...imageUint, ...zipEncryptedUint]);\r\n\r\n    const fileName = patientID ? `${patientID}_image.png` : \"embedded_image.png\";\r\n\r\n    postMessage({\r\n        result: new Blob([resultUint], { type }),\r\n    });\r\n    close();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}